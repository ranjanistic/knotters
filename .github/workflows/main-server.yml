name: Knotters Django Server CI

on:
  push:
    branches: [ main ]
    paths:
      - ".github/workflows/main-server.yml"
      - "compete/**"
      - "main/**"
      - "moderation/**"
      - "people/**"
      - "projects/**"
      - "manage.py"

jobs:
  testing:
    runs-on: ubuntu-20.04
    strategy:
      max-parallel: 1
      matrix:
        python-version: [3.9]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Setup Environment
      run: |
        touch ${{ secrets.ENVPATH }}
        echo "PROJECTKEY=${{ secrets.PROJECTKEY }}" >> ${{ secrets.ENVPATH }}
        echo "PUBNAME=${{ secrets.PUBNAME }}" >> ${{ secrets.ENVPATH }}
        echo "ENV=${{ secrets.ENV }}" >> ${{ secrets.ENVPATH }}
        echo "HOSTS=${{ secrets.HOSTS }}" >> ${{ secrets.ENVPATH }}
        echo "DBNAME=${{ secrets.DBNAME }}" >> ${{ secrets.ENVPATH }}
        echo "DBLINK=${{ secrets.DBLINK }}" >> ${{ secrets.ENVPATH }}
        echo "DBUSER=${{ secrets.DBUSER }}" >> ${{ secrets.ENVPATH }}
        echo "DBPASS=${{ secrets.DBPASS }}" >> ${{ secrets.ENVPATH }}
        echo "MAILUSER=${{ secrets.MAILUSER }}" >> ${{ secrets.ENVPATH }}
        echo "MAILPASS=${{ secrets.MAILPASS }}" >> ${{ secrets.ENVPATH }}
        echo "ADMINPATH=${{ secrets.ADMINPATH }}" >> ${{ secrets.ENVPATH }}
        echo "GITHUBBOTTOKEN=${{ secrets.GITHUBBOTTOKEN }}" >> ${{ secrets.ENVPATH }}
        echo "DISCORDBOTTOKEN=${{ secrets.DISCORDBOTTOKEN }}" >> ${{ secrets.ENVPATH }}
        echo "SITE=${{ secrets.SITE }}" >> ${{ secrets.ENVPATH }}
        echo "SENDERTOKEN=${{ secrets.SENDERTOKEN }}" >> ${{ secrets.ENVPATH }}
        echo "MEDIA_URL=${{ secrets.MEDIA_URL }}" >> ${{ secrets.ENVPATH }}
        echo "STATIC_URL=${{ secrets.STATIC_URL }}" >> ${{ secrets.ENVPATH }}
    - name: Unit Testing
      run: |
        python manage.py test

  build_deploy:
    needs: [ testing ]
    runs-on: self-hosted
    strategy:
      max-parallel: 1
      matrix:
        python-version: [3.9]

    steps:
    - name: Fetch & Merge changes
      run: git pull
      working-directory: ${{ secrets.WORKINGDIR }}
    - name: Unlock Environment
      run: |
        gpg --passphrase "${{ secrets.KNOTTERSBOTGPG }}" -o ${{ secrets.ENVPATH }} -d ${{ secrets.ENVGPGPATH }} 
    - name: Install Dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
    - name: Creating Backup
      run: |
        mongodump --uri="${{ secrets.DBLINK }}" -o backup
        tar czf backup\${{ secrets.DBNAME }}.tar.gz backup\${{ secrets.DBNAME }}
        rmdir backup\${{ secrets.DBNAME }} /s /q
        gpg -e -r ${{ secrets.MAILUSER }} backup\${{ secrets.DBNAME }}.tar.gz
        del backup\${{ secrets.DBNAME }}.tar.gz /q 2>nul
    - name: Run Migrations
      run: |
        py manage.py makemigrations --noinput
        py manage.py migrate --noinput
    - name: Lock Environment
      run: |
        del ${{ secrets.ENVPATH }} /q 2>nul
