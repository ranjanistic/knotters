name: Server Method CI

on:
  push:
    branches: [ main ]
    paths:
      - '**/test_methods.py'
      - '**/methods.py'

jobs:
  testing:
    runs-on: [self-hosted, testing]
    strategy:
      max-parallel: 1
      matrix:
        python-version: [3.8]

    steps:
    - name: Setup source
      uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
    - name: Create Environment
      run: |
        touch ${{ secrets.ENVPATH }}
        echo "PROJECTKEY=${{ secrets.PROJECTKEY }}" >> ${{ secrets.ENVPATH }}
        echo "PUBNAME=${{ secrets.PUBNAME }}" >> ${{ secrets.ENVPATH }}
        echo "ENV=${{ secrets.ENV }}" >> ${{ secrets.ENVPATH }}
        echo "HOSTS=${{ secrets.HOSTS }}" >> ${{ secrets.ENVPATH }}
        echo "DBNAME=${{ secrets.DBTESTNAME }}" >> ${{ secrets.ENVPATH }}
        echo "DBLINK=${{ secrets.DBTESTLINK }}" >> ${{ secrets.ENVPATH }}
        echo "DBUSER=${{ secrets.DBTESTUSER }}" >> ${{ secrets.ENVPATH }}
        echo "DBPASS=${{ secrets.DBTESTPASS }}" >> ${{ secrets.ENVPATH }}
        echo "MAILUSER=${{ secrets.MAILUSER }}" >> ${{ secrets.ENVPATH }}
        echo "MAILPASS=${{ secrets.MAILPASS }}" >> ${{ secrets.ENVPATH }}
        echo "BOTMAIL=${{ secrets.BOTMAIL }}" >> ${{ secrets.ENVPATH }}
        echo "ADMINPATH=${{ secrets.ADMINPATH }}" >> ${{ secrets.ENVPATH }}
        echo "GITHUBBOTTOKEN=${{ secrets.GITHUBBOTTOKEN }}" >> ${{ secrets.ENVPATH }}
        echo "DISCORDBOTTOKEN=${{ secrets.DISCORDBOTTOKEN }}" >> ${{ secrets.ENVPATH }}
        echo "SITE=${{ secrets.SITE }}" >> ${{ secrets.ENVPATH }}
        echo "SENDERTOKEN=${{ secrets.SENDERTOKEN }}" >> ${{ secrets.ENVPATH }}
        echo "MEDIA_URL=${{ secrets.MEDIA_URL }}" >> ${{ secrets.ENVPATH }}
        echo "STATIC_URL=${{ secrets.STATIC_URL }}" >> ${{ secrets.ENVPATH }}
        echo "SERVER_EMAIL=${{ secrets.SERVER_EMAIL }}" >> ${{ secrets.ENVPATH }}
    - name: Run migrations
      run: |
        python manage.py makemigrations --noinput
        python manage.py migrate --noinput
    - name: Run tests
      run: |
        python manage.py test --noinput --verbosity=1 --keepdb --exclude-tag=model
    - name: Clear environment
      run: |
        sudo rm -f ${{ secrets.ENVPATH }}

  build:
    needs: [testing]
    runs-on: [self-hosted, building]
    strategy:
      max-parallel: 1
      matrix:
        python-version: [3.8]

    steps:
    - name: Merge changes
      run: |
        sudo git pull --depth=10
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
    - name: Setup environment
      run: |
        sudo rm -f ${{ secrets.ENVPATH }}
        sudo gpg --pinentry-mode loopback --passphrase "${{ secrets.KNOTTERSBOTGPG }}" -o ${{ secrets.ENVPATH }} -d ${{ secrets.ENVGPGPATH }}
    - name: Run migrations
      run: |
        python manage.py makemigrations --noinput
        python manage.py migrate --noinput
    - name: Clear environment
      run: |
        sudo rm -f ${{ secrets.ENVPATH }}

  deploy:
    needs: [build]
    runs-on: [self-hosted,deployment]
    strategy:
      max-parallel: 1
      matrix:
        python-version: [3.8]

    steps:
    - name: Create backup
      run: |
        sudo mongodump --forceTableScan --uri="${{ secrets.DBBACKUPLINK }}" -o _backup_
        sudo tar czf _backup_/${{ secrets.DBNAME }}.tar.gz _backup_/${{ secrets.DBNAME }}
        sudo rm -f _backup_/${{ secrets.DBNAME }}.tar.gz.gpg
        sudo gpg -e -r ${{ secrets.MAILUSER }} _backup_/${{ secrets.DBNAME }}.tar.gz
        sudo rm -f -r _backup_/${{ secrets.DBNAME }}
        sudo rm -f _backup_/${{ secrets.DBNAME }}.tar.gz
        sudo tar czf _backup_/media.tar.gz media
        sudo rm -f _backup_/media.tar.gz.gpg
        sudo gpg -e -r ${{ secrets.MAILUSER }} _backup_/media.tar.gz
        sudo rm -f _backup_/media.tar.gz
    - name: Merge changes
      run: |
        sudo git pull --depth=10
